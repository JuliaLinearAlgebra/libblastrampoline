name: CI

on:
  push:
    branches: "main"
    tags: ["*"]
  pull_request:
  release:

jobs:
  gensymbol:
    name: generate_func_list idempotency
    runs-on: ubuntu-20.04
  steps:
    - uses: actions/checkout@v2
    - name: Check exported symbols up to date
        shell: bash
        run: |
          cd ext/gensymbol
          ./generate_func_list.sh
          git diff --exit-code

  test:
    name: Julia ${{ matrix.julia-version }} - ${{ matrix.os }} - ${{ matrix.julia-arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        julia-version:
          - "nightly"
        os:
          - ubuntu-20.04
          - macos-latest
          - windows-latest
        julia-arch:
          - x64
          - x86
        exclude:
          - os: macOS-latest
            julia-arch: x86

    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia-version }}
          arch: ${{ matrix.julia-arch }}
      - name: Cache artifacts
        uses: actions/cache@v2
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - name: Install gcc-multilib
        if: ${{ matrix.os == 'ubuntu-20.04' && matrix.julia-arch == 'x86' }}
        shell: bash
        run: |
          sudo apt install -y gcc-multilib
      - name: Install libblas64
        if: ${{ matrix.os == 'ubuntu-20.04' && matrix.julia-arch == 'x64' }}
        shell: bash
        run: |
          sudo apt update && sudo apt install -y libblas64-dev liblapack64-dev
      - name: Install i686-w64-mingw32-gcc
        if: ${{ matrix.os == 'windows-latest' && matrix.julia-arch == 'x86' }}
        shell: bash
        run: |
          choco install mingw -y --x86 --force --params "/exception:sjlj"
          choco install make -y
          echo "CC=i686-w64-mingw32-gcc" >> "${GITHUB_ENV}"
      - name: Set compiler for 64-bit Windows
        if: ${{ matrix.os == 'windows-latest' && matrix.julia-arch == 'x64' }}
        shell: bash
        run: |
          echo "CC=x86_64-w64-mingw32-gcc" >> "${GITHUB_ENV}"
      - name: Run tests
        shell: julia --color=yes --project=test {0}
        run: |
          using Pkg
          Pkg.instantiate()
          include(joinpath(pwd(), "test", "runtests.jl"))
